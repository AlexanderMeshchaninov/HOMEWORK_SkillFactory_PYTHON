import statistics
import matplotlib.pyplot as plt

ALPHA = 0.05 # Наш установленный уровень значимости

# функция для принятия решения об отклонении нулевой гипотезы
def decision_normality(p):
    """Данная функция отображает сравнивает полученное значения (p) и в зависимости 
    от установленного уровня значимости (ALPHA) выдает варианты ответа:
    
    - Распределение не является нормальным
    - Распределение является нормальным

    Args:
        p (int()): уровень значения
    """
    print(f'p-value = {round(p, 3)}')
    print()
    if p <= ALPHA: 
        print(f'p-значение меньше, чем заданный уровень значимости {ALPHA}. Распределение отлично от нормального')
    else:
        print(f'p-значение больше, чем заданный уровень значимости {ALPHA}. Распределение является нормальным')


# функция для принятия решения об отклонении нулевой гипотезы
def decision_hypothesis(p):
    """Данная функция отображает сравнивает полученное значения (p) и в зависимости 
    от установленного уровня значимости (ALPHA) выдает варианты ответа:
    
    - Отвергаем нулевую гипотезу в пользу альтернативной
    - Нет основания отвергнуть нулевую гипотезу

    Args:
        p (int()): уровень значения
    """
    print(f'p-value = {round(p, 3)}')
    print()
    if p <= ALPHA:
        print(f'p-значение меньше, чем заданный уровень значимости {ALPHA}. Отвергаем нулевую гипотезу в пользу альтернативной.')
    else:
        print(f'p-значение больше, чем заданный уровень значимости {ALPHA}. У нас нет оснований отвергнуть нулевую гипотезу.')

# функция для отображения основных статистических характеристик признака
def main_numeric_statistics(data_df, feature_name):
    """вывод основных статистических характеристик признака

    Args:
        data_df (pandas.DataFrame): данные таблицы
        feature_name (str): название признака
    """
    print('-' * 20)
    # Максимальное
    print(f'Максимальное значение: {data_df[f'{feature_name}'].max()}')
    print()
    # Минимальное
    print(f'Минимальное значение: {data_df[f'{feature_name}'].min()}')
    print()
    # Среднее арифметическое
    print(f'Среднее арифметическое: {statistics.mean(data_df[f'{feature_name}'])}')
    print()
    # Размах
    print(f'Размах: {data_df[f'{feature_name}'].max() - data_df[f'{feature_name}'].min()}')
    print()
    # Мода
    print(f'Мода: {data_df[f'{feature_name}'].mode()}')
    print()
    # Медиана
    print(f'Медиана: {data_df[f'{feature_name}'].median()}')
    print('-' * 20)